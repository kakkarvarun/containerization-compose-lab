services:
  # ========= MySQL (PERSISTENCE + phpMyAdmin target) =========
  mysql_primary:
    image: mysql:8.0
    environment:
      MYSQL_ROOT_PASSWORD: ${MYSQL_ROOT_PASSWORD}
      MYSQL_DATABASE: ${MYSQL_DATABASE}
      MYSQL_USER: ${MYSQL_USER}
      MYSQL_PASSWORD: ${MYSQL_PASSWORD}
    volumes:
      - mysql_data:/var/lib/mysql
    networks: [backend]
    healthcheck:
      test: ["CMD-SHELL", "mysqladmin ping -h 127.0.0.1 -uroot -p$${MYSQL_ROOT_PASSWORD} || exit 1"]
      interval: 10s
      timeout: 5s
      retries: 10
    restart: unless-stopped

  phpmyadmin:
    image: phpmyadmin:latest
    environment:
      PMA_HOST: mysql_primary   # talk to the persistent MySQL
    ports:
      - "8081:80"               # http://localhost:8081
    depends_on:
      mysql_primary:
        condition: service_healthy
    networks: [backend]
    restart: unless-stopped

  # ========= MySQL (SCALING DEMO: 3 replicas, NO volume) =========
  mysql_replicas:
    image: mysql:8.0
    environment:
      MYSQL_ROOT_PASSWORD: ${MYSQL_ROOT_PASSWORD}
      MYSQL_DATABASE: ${MYSQL_DATABASE}
      MYSQL_USER: ${MYSQL_USER}
      MYSQL_PASSWORD: ${MYSQL_PASSWORD}
    # IMPORTANT: no volume here, so replicas don't fight over files
    networks: [backend]
    restart: unless-stopped
    deploy:
      replicas: 3   # hard-coded replicas for the mark

  # ========= PostgreSQL + pgAdmin (with healthcheck) =========
  postgres:
    image: postgres:16
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks: [backend]
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U $${POSTGRES_USER} -d $${POSTGRES_DB} || exit 1"]
      interval: 10s
      timeout: 5s
      retries: 10
    restart: unless-stopped

  pgadmin:
    image: dpage/pgadmin4:8
    environment:
      PGADMIN_DEFAULT_EMAIL: ${PGADMIN_EMAIL}
      PGADMIN_DEFAULT_PASSWORD: ${PGADMIN_PASSWORD}
    ports:
      - "8082:80"               # http://localhost:8082
    depends_on:
      postgres:
        condition: service_healthy
    networks: [backend]
    restart: unless-stopped

  # ========= Simple static HTML (multi-stage build) =========
  web:
    build:
      context: ./web
      target: runtime
    ports:
      - "8080:80"               # http://localhost:8080
    networks: [backend]
    restart: unless-stopped

networks:
  backend:

volumes:
  mysql_data:
  postgres_data:
